# Platform dependant commands (TODO)
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
  IS_LINUX=1
elif [[ "$OSTYPE" == "darwin"* ]]; then
  IS_MACOS=1
else
  true
  # Something else...
fi

# Avoid rebooting the host when trying to reboot the target
alias reboot='echo "\"reboot\" command disabled on the Linux desktop"'

alias dc='cd'
alias cd..='cd ..'

alias grep='grep --color=auto'
alias diff='colordiff'
alias py='python'

# Open folders and files in the using the default application
if [[ $IS_LINUX ]]; then
  files() { xdg-open ./"${1}"; }
else
  files() { open -a Finder ./"${1}"; }
fi

# Fix to the control center in i3, see:
# https://www.reddit.com/r/Fedora/comments/7dcc0o/fix_for_blank_gnome_control_center_settings_with/
alias settings='env XDG_CURRENT_DESKTOP=GNOME gnome-control-center'

# Enable interactive mode to ask confirmation to overwrite
alias cp='cp -i'
alias ln='ln -i'
alias mv='mv -i'
# Do not prompt for every file on Linux
if [[ $IS_LINUX ]]; then
  alias rm='rm --interactive=once'
else
  alias rm='rm -i'
fi

# Use human readable values
# Do not show snap partitions on Ubuntu
if [[ $IS_LINUX ]]; then
  alias df='df -h --exclude-type="squashfs"'
else
  alias df='df -h'
fi
alias du='du -h'

dir() { mkdir "${1}" && cd "${1}" || return 1; }
alias tmpdir='cd $(mktemp -d)'
alias mktmp='tmpdir'

alias fp='ps aux | grep -v grep | grep -i '

alias apt-get='sudo apt-get'
alias apt='sudo apt'

alias temp='watch -d -n 5 sensors'
#alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
alias stripcolors='sed "s/\x1B\[\([0-9]\{1,2\}\(;[0-9]\{1,2\}\)\?\)\?[mGK]//g"'
tust() { time unbuffer "${1}" 2>&1 | stripcolors | tee "${2}"; }

alias time='/usr/bin/time -f "[%C] took %e seconds"'

alias -g H='| head'
alias -g T='| tail'
alias -g G='| grep'
alias -g L="| less"
alias -g LL="2>&1 | less"
alias -g CA="2>&1 | cat -A"
alias -g NE="2> /dev/null"
alias -g NUL="> /dev/null 2>&1"

## Git aliases
alias gda="git difftool --dir-diff --no-symlinks &" # diff btw local and HEAD
alias gdas="git difftool --dir-diff --no-symlinks HEAD . &" # diff btw local, including stash and HEAD
gdah() { git difftool --dir-diff --no-symlinks HEAD~"${1}" HEAD & } # diff btw HEAD-n and HEAD
alias gk="gitk --all"
alias gst="git status -s"
alias gstt="git status"
alias gco="git checkout"
alias gcb="git checkout -b "
alias gcbd="git branch -D "
gcbr() { gcbd "${1}" && gcb "${1}"; }
alias gf="git fetch --all --tags --prune"
alias gp="git pull --rebase"
gft() {
  branch="${1#"origin/"}"
  if [ -z "${branch}" ]; then
    if git ls-remote --exit-code --heads origin refs/heads/main &> /dev/null ; then
      branch="main"
    elif git ls-remote --exit-code --heads origin refs/heads/master &> /dev/null ; then
      branch="master"
    else
      echo "Branch 'master' nor 'main' has been found on remote"
      return 1
    fi
  fi
  git fetch --all --tags --prune && \
  git checkout "$(git remote)/${branch}" && \
  (git branch -D "${branch}" || true) && \
  git checkout -b "${branch}" && \
  git branch --set-upstream-to="$(git remote)/${branch}" "${branch}" && \
  git fetch --all --tags --prune --prune-tags;
}
if [[ $IS_LINUX ]]; then
  some_lines() {
    # Allow some marging if there is line wrapping or due to empty lines with --graph
    MARGIN="4"
    MAX="20"
    LINES="$(tput lines)"
    if [ "${MAX}" -gt "${LINES}" ]; then
      [[ "${LINES}" -gt "${MARGIN}" ]] && echo "$((LINES-MARGIN))" || echo "1"
    else
      echo "$((MAX-MARGIN))"
    fi
  }
  alias gls="unbuffer git --no-pager log --all --graph --oneline | head -n \$(some_lines)"
  alias glsm="unbuffer git --no-pager log --graph --oneline | head -n \$(some_lines)"
else
  alias gls="git --no-pager log --all --graph --oneline -\$((\$(tput lines)-2))"
  alias glsm="git --no-pager log --graph --oneline -\$((\$(tput lines)-2))"
fi
alias gll="git log --all --graph --pretty=format:'%C(yellow)%h%C(reset) -%C(auto)%d%C(reset) %s %C(green)(%cr) %C(bold blue)<%an>%C(reset)' --abbrev-commit"
alias gllm="git log --graph --pretty=format:'%C(yellow)%h%C(reset) -%C(auto)%d%C(reset) %s %C(green)(%cr) %C(bold blue)<%an>%C(reset)' --abbrev-commit"
alias gca="git commit -v --amend"
alias gc="git commit -v"
alias gcp="git cherry-pick "

alias pyenv-deactivate="deactivate > /dev/null 2>&1"
pyenv-activate() {
  pyenv-deactivate
  [ -z "${1}" ] && VENV_PATH="." || VENV_PATH="${1}"
  VENV_PATH="${VENV_PATH}/venv/bin/activate"
  if ! source "${VENV_PATH}" > /dev/null 2>&1; then
    echo "No python virtual env available in ${VENV_PATH}"
    return 1
  fi
}
alias activate="pyenv-activate"
alias pyenv-create="pyenv-deactivate ; rm -rf venv > /dev/null 2>&1 ; python -m venv venv && pyenv-activate"
#alias pyenv-create="pyenv-deactivate ; rm -rf venv > /dev/null 2>&1 ; python -m venv venv && pyenv-activate && pip install pip==21.2 && pip install pip-tools && echo -e '\nInstalling requirements' && pip-sync"
#alias pyenv-create="pyenv-deactivate ; rm -rf venv > /dev/null 2>&1 ; python -m venv venv && pyenv-activate && pip install -U pip setuptools wheel pip-tools && echo -e '\nInstalling requirements' && pip-sync"

# Add code command to MacOS
[[ $IS_MACOS ]] && code() { open -a "Visual Studio Code" ./"${1}" ; }

# Encrypt file with GPG key: `gpg-encrypt secretStuff.tar.gz john.doe`
gpg-encrypt() {
  FILENAME="${1}"
  RECIPIENT="${2}"
  if [[ -z "${FILENAME}" || -z "${RECIPIENT}" ]]; then
    echo "File path \"${FILENAME}\" AND recipient \"${RECIPIENT}\" must be provided"
    return 1
  fi
  OUTPUT="${FILENAME}.for-${RECIPIENT}.$(date +%Y-%m-%d_%H:%M).enc"
  gpg --encrypt --armor --output "${OUTPUT}" --recipient "${RECIPIENT}" "${FILENAME}" && echo "${FILENAME} -> ${OUTPUT}" ;
}

# Decrypt file with GPG key: `gpg-decrypt secretStuff.tar.gz.2022-30-01_13:42.enc secretStuff.tar.gz`
gpg-decrypt() {
  FILENAME="${1}"
  if [ -z "${FILENAME}" ]; then
    echo "File path must be provided"
    return 1
  fi
  [[ -z "${2}" ]] && OUTPUT="${FILENAME}.dec" || OUTPUT="${2}"
  gpg --decrypt --armor --output "${OUTPUT}" "${FILENAME}" && echo "${FILENAME} -> ${OUTPUT}" ;
}

# connect-vpn orange up || connect-vpn pa2 down
connect-vpn() {
  help() {
    echo "Incorrect use: connect-vpn orange up || connect-vpn pa2 down"
  }
  if [[ $# == "0" ]]; then
    help
    echo -e "A VPN connection name must be provided, one of:\n$(nmcli con | grep vpn | awk '{print $1}')"
    return 1
  elif [[ $# == "1" || ("${2}" != "up" && "${2}" != "down") ]]; then
    help
    echo "A status must be provided, one of: 'up' or 'down'"
    return 1
  fi

  CONN="${1}"
  STATUS="${2}"

  # Force reset password for VPNs that use 2FA
  # See: https://gitlab.gnome.org/GNOME/NetworkManager-openvpn/-/issues/12
  # And: https://gitlab.freedesktop.org/NetworkManager/NetworkManager/-/issues/97
  if [[ "${CONN}" == "orangeV2" ]]; then
    nmcli connection modify "${CONN}" vpn.secrets password=testPassword
  fi

  nmcli con "${STATUS}" id "${CONN}" ;
}
